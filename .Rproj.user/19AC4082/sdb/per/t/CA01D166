{
    "contents" : "## Put comments here that give an overall description of what your\n## functions do\n\n  ## Erick's Comments:\n  ## makeCacheMatrix: initializes the matrix and provides methods to handle encapsulated variables (no brain here)\n  ## cacheSolve:      Calculates the inverse of the matrix passed as argument.\n  ##                  It determines if the inverse matrix has been already calculated, if so, it returns the\n  ##                  cached inverse matrix, otherwise it calculates the inverse matrix received as argument\n  ## \n  ## Class Variables description:\n  ##  matx    --> matrix to be processed, argument to makeCacheMatrix and cacheSolve functions\n  ##  invmat  --> inverse matrix, local variable declared in both functions\n  ##\n  ## Function arguments description:\n  ##  maty    --> matrix argument used in the \"set\" method, this is to assign its value to matx\n  ##  inverse --> inverse matrix argment used in \"setinverse\" method, this is to assign its value to invmat\n\n## Write a short comment describing this function\n## This function initializes the matrix and provides methods to handle class variables\n\nmakeCacheMatrix <- function(matx = matrix()) {\n  # Class variables\n  invmat <- NULL\n  \n  # Class \"set\" & \"get\" methods  \n  set <- function(maty) {\n    matx <<- maty\n    invmat <<- NULL\n  }\n  \n  get <- function() {\n    matx\n  }\n  \n  # Specific \"set\" & \"get\" methods for class variables\n  setinverse <- function(inverse) {\n    invmat <<- inverse\n  }\n  \n  getinverse <- function() {\n    invmat\n  }\n  \n  # Default declaration to present all methods\n  # I did not understand very well this declaration, but if I did not put it, i got an error:\n  # \"Error in x$getinverse : object of type 'closure' is not subsettable\", which I could not resolve in any other way.\n  # I found this declaration in the example provided in the Assignment description\n  \n  list(set = set, get = get,\n       setinverse = setinverse,\n       getinverse = getinverse)\t\n}\n\n\n## Write a short comment describing this function\n## This function does:\n##  Receives a matrix as argument \"x\"\n##  Reads the current state of the inverse matrix for \"x\"\n##  If the inverse matrix is not null, returns the current value without recalculating it\n##  Otherwise, reads current data for \"x\", calculates its inverse matrix, sets the result to the inverse matrix of \"x\"\n##  and returns the inverse matrix\n\ncacheSolve <- function(x, ...) {\n\n  # Getting current inverse matrix state for the matrix x passed as argument\n  invmat <- x$getinverse()\n  \n  # Determine if the inverse matrix is not null (means a calculation has been processed previously)\n  if(!is.null(invmat)) {\n    message(\"Reading from cache\")\n    # Returns current value stored for matrix x\n    return(invmat)\n  }\n  \n  # if no inverse matrix has been calculated then gets the matrix's data and uses it to calculate & set the class variable\n  # of inverse matrix for matrix x\n  data <- x$get()\n  invmat <- solve(data, ...)\n  x$setinverse(invmat)\n  \n  # returns the inverse matrix\n  invmat   \n}\n",
    "created" : 1443393278506.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1535686021",
    "id" : "CA01D166",
    "lastKnownWriteTime" : 1443392982,
    "path" : "C:/Users/Erick/Coursera Working Directory/R/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}